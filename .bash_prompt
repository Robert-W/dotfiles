#!/bin/bash
# Custom Bash Prompt to Add some basic Git support
# Inspired by https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git Repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# Check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date
			git update-index --really-refresh -q &>/dev/null;
			# Check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;
			# Check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;
			# Check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi
			# Check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;
		# Get the short symbolic ref
		# If HEAD isn't a short symbolic ref, get the short SHA for the latest commit
		# Otherwise, give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e " ~ ${1}${branchName}${2}${s}";

	else
		return;
	fi;

}

if tput setaf 1 &> /dev/null; then
	# Reset the current colors
	tput sgr0;
	yellow=$(tput setaf 226);
	cyan=$(tput setaf 14);
	red=$(tput setaf 124);
	reset=$(tput sgr0);
else
	yellow="\e[1;33m";
	cyan="\e[1;36m";
	red="\e[1;31m";
	reset="\e[0m";
fi;

# Set the terminal prompt
# Let's start with the default value minus the $
PS1="\h:\W \u";
# Add our Git status
PS1+="\$(prompt_git \"\[${yellow}\]\" \"\[${cyan}\]\")";
# Reset our colors
PS1+="\[${reset}\] ";
# Export our new prompt
export PS1;
